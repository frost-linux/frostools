#!/bin/bash
#
# Copyright (C) 2018-19 artoo@artixlinux.org
# Copyright (C) 2018 Artix Linux Developers
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

shopt -s extglob

. @libdir@/frostools/util-base.sh

select_os(){
    local os_list=( $(detect) ) count=${#os_list[@]}
    if [[ ${count} > 1 ]];then
        msg "Detected systems:"
        local i=0
        for os in ${os_list[@]};do
            local last=${os##*:}
            case $last in
                'efi') count=$((count-1)) ;;
                *) info "$i) $(get_os_name $os)"; i=$((i+1)) ;;
            esac
        done
        i=0
        msg "Select system to mount [0-%s] : " "$((count-1))"
        read select
    else
        select=0
    fi
    local os_str=${os_list[$select]} type
    type=$os_str
    root=${os_str%%:*}
    type=${type##*:}
    if [[ "${type##*:}" == 'linux' ]];then
        msg "Mounting (%s) [%s]" "$(get_os_name $os_str)" "$root"
        mount_os "$1" "$root"
    else
        die "You can't mount %s!" "$select"
    fi
}

automount=false

usage() {
    echo "usage: ${0##*/} -a [or] ${0##*/} chroot-dir [command]"
    echo '    -a             Automount detected linux system'
    echo '    -h             Print this help message'
    echo ''
    echo "    If 'command' is unspecified, ${0##*/} will launch /bin/sh."
    echo ''
    echo "    If 'automount' is true, ${0##*/} will launch /bin/bash"
    echo "    and ${chrootdir}."
    echo ''
    echo ''
    exit $1
}

orig_argv=("$0" "$@")

opts=':ha'

while getopts ${opts} arg; do
    case "${arg}" in
        a) automount=true ;;
        h|?) usage 0 ;;
        *) echo "invalid argument ${arg}"; usage 1 ;;
    esac
done
shift $(( OPTIND - 1 ))

check_root

if ${automount};then
    chrootdir=/mnt
    run_args=/bin/bash

    select_os "${chrootdir}"
else
    chrootdir=$1
    shift
    run_args="$@"

    [[ -d ${chrootdir} ]] || die "Can't create chroot on non-directory %s" "${chrootdir}"

    chroot_api_mount "${chrootdir}" || die "failed to setup API filesystems in chroot %s" "${chrootdir}"
    chroot_add_resolv_conf "${chrootdir}"
fi

SHELL=/bin/sh unshare --fork --pid chroot "${chrootdir}" ${run_args[*]}
